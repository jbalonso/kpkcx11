AC_REVISION($Revision: 1.1 $)dnl
AC_PREREQ(2.0)
AC_INIT(kpkcs11.dsw)

AC_CANONICAL_SYSTEM

dnl *********************************************************************
dnl * See if umich-specific defaults were requested.
dnl *********************************************************************

UMICH=no
AC_ARG_WITH(
   umich,
   [  --with-umich            use University of Michigan defaults
                          (You probably DON'T want to use this
                           if you're not at UMich!)],
   [case "$withval" in
       ""|yes)
          echo "Using umich defaults";
          UMICH=yes;
          ;;
       no)
          ;;
       *)
          echo "Ignoring --with-umich=$withval";
          echo "*_Not_* using umich defaults";
          ;;
    esac
   ],
)

dnl *********************************************************************
dnl * Set default values
dnl *********************************************************************

case "$UMICH" in
   yes)
      dnl -- Use umich-specific default values
      KRB4_DEFAULT=/afs/umich.edu/group/itd/software/packages/k/kerberos-5/krb5-1.2.1UM/@sys/dest/usr/krb5
      KRB5_DEFAULT=/afs/umich.edu/group/itd/software/packages/k/kerberos-5/krb5-1.2.1UM/@sys/dest/usr/krb5
      case "$target" in
         *-solaris2.6)
            CC=/opt/SUNWspro/bin/cc
            OPENSSL_DEFAULT=/usr/um/openssl/0.9.6
	    KRB4_DEFAULT=/usr/um/krb5/1.1.1
	    KRB5_DEFAULT=/usr/um/krb5/1.1.1
            ;;
         *-solaris2.8)
            CC=/opt/SUNWspro/bin/cc
            OPENSSL_DEFAULT=/usr/um/openssl/0.9.6
	    KRB4_DEFAULT=/usr/um/krb5/1.2.1UM
	    KRB5_DEFAULT=/usr/um/krb5/1.2.1UM
            ;;
         *-linux-*)
	    OPENSSL_DEFAULT=/usr
            ;;
         *-openbsd*)
	    OPENSSL_DEFAULT=/usr
            ;;
         *-ibm-aix*)
            CC=/afs/umich.edu/group/itd/umich/.bin/rs_aix43/cc42
            LD=/afs/umich.edu/group/itd/umich/.bin/rs_aix43/gcc
	    OPENSSL_DEFAULT=/afs/umich.edu/group/itd/x509/build/openssl
            ;;
         *-hp-*)
            CC=/opt/ansic/bin/cc
	    OPENSSL_DEFAULT=/afs/umich.edu/group/itd/x509/build/openssl
            ;;
         *)
	    OPENSSL_DEFAULT=/afs/umich.edu/group/itd/x509/build/openssl
            ;;
      esac
      ;;

   no)
      dnl -- Use generic default values
      dnl -- Set some defaults for Kerberos and OpenSSL locations.
      dnl -- The chosen defaults are arbitrary.
      dnl -- DON'T assume any defaults for compiler
      KRB4_DEFAULT=/usr/kerberos
      KRB5_DEFAULT=/usr/kerberos
      OPENSSL_DEFAULT=/usr
      ;;
esac


dnl *********************************************************************
dnl * Determine compiler
dnl *********************************************************************

AC_MSG_CHECKING(Compiler and Linker/Loader settings)
AC_ARG_WITH(
   cc,
   [  --with-cc               specify particular compiler to be used],
   [ CC=$withval
   ],
)
AC_PROG_CC
AC_SUBST(CC)

dnl *********************************************************************
dnl * Determine linker/loader
dnl *********************************************************************

echo "Testing LD: ${LD+set}"
if test "${LD+set}" = set ; then
   :
else
   echo "Defaulting LD to $CC"
   LD=$CC
fi

AC_ARG_WITH(
   ld,
   [  --with-ld               specify particular linker/loader to be used],
   [ LD=$withval
   ],
)
AC_SUBST(LD)

dnl *********************************************************************
dnl * Determine correct make program
dnl *********************************************************************

AC_PATH_PROG(GMAKE, gmake, /bin/false, /usr/um/make/bin:/usr/local/bin:/usr/bin:$PATH)
if test $ac_cv_path_GMAKE = /bin/false; then
   AC_PATH_PROG(MAKE, make, /bin/false, /usr/um/gnu/bin:/usr/itd/bin:$PATH)
      if test $ac_cv_path_MAKE = /bin/false; then
         AC_MSG_ERROR(Did not find gmake in /usr/bin:/usr/um/make/bin or make in /usr/um/gnu/bin)
      else
         MAKE=${ac_cv_path_MAKE}
      fi
else
   MAKE=${ac_cv_path_GMAKE}
fi
AC_SUBST(MAKE)

dnl *********************************************************************
dnl * Allow overriding of CFLAGS and LDFLAGS
dnl *********************************************************************

AC_MSG_CHECKING(CFLAGS setting)
if test -z "$CFLAGS"; then
   AC_CACHE_VAL(ac_cv_prog_CC_CFLAGS, [ac_cv_prog_CC_CFLAGS="-O"])
   CFLAGS="${ac_cv_prog_CC_CFLAGS}"
else
   ac_cv_prog_LD_CFLAGS="$CFLAGS"
fi
AC_SUBST(CFLAGS) AC_MSG_RESULT($CFLAGS)

AC_MSG_CHECKING(LDFLAGS setting)
if test -z "$LDFLAGS"; then
   AC_CACHE_VAL(ac_cv_prog_LD_LDFLAGS, [ac_cv_prog_LD_LDFLAGS=""])
   LDFLAGS="${ac_cv_prog_LD_LDFLAGS}"
else
   ac_cv_prog_LD_LDFLAGS="$LDFLAGS"
fi
AC_SUBST(LDFLAGS) AC_MSG_RESULT($LDFLAGS)


dnl *********************************************************************
dnl * Determine the correct PIC settings for the target platform
dnl *********************************************************************

AC_MSG_CHECKING(PICFLAGS --  Position Independent Code -- setting)
case "$target" in
*-linux-*)
        PICFLAGS="-fPIC"
        ;;
*-hp-*)
        PICFLAGS="+z"
        ;;
sparc-sun-solaris2*)
	if test "$ac_cv_prog_gcc" = yes ; then
		PICFLAGS="-fpic"
	else
        	PICFLAGS="-KPIC"
	fi
        ;;
*-ibm-aix*)
        ;;
*-*-openbsd*)
        ;;
*)
        AC_MSG_ERROR(Cannot determine correct PIC flags for $target)
        ;;
esac
AC_SUBST(PICFLAGS) AC_MSG_RESULT($PICFLAGS)

dnl *********************************************************************
dnl * Determine proper Kerberos settings.  The dafault is to use krb5.
dnl * If they specify, '--with-krb4' then we'll honor that.  If they
dnl * try to specify both, then we complain.
dnl *********************************************************************

AC_MSG_CHECKING(Kerberos settings)
dnl Check if they specified K5
AC_ARG_WITH(
   krb5,
   [  --with-krb5             use Kerberos 5 credential cache for certs (default)],
   [case "$withval" in
       yes)
	  KRB5=$withval
          ;;
       no)
          KRB5=no
          ;;
       *)
          KRB5=$withval
          ;;
    esac
   ],
   KRB5=default
)

dnl Check if they specified K4
AC_ARG_WITH(
   krb4,
   [  --with-krb4             use Kerberos 4 credential cache for certs],
   [case "$withval" in
       yes)
          KRB4=$withval
          ;;
       no)
          KRB4=no
          ;;
       *)
          KRB4=$withval
          ;;
    esac
   ],
   KRB4=default
)

dnl KRB4 and KRB5 can each have four values:
dnl 1) 'yes' 2) 'no'  3) 'default' 4) a specified path
dnl Sort it out and do the right thing

dnl If both are either 'yes' or a specified path, that's an error
if test "$KRB4" != "default" -a "$KRB4" != "no" -a \
        "$KRB5" != "default" -a "$KRB5" != "no" ; then
   AC_MSG_ERROR(Only one version of Kerberos can be used. You must specify either Kerberos4 or Kerberos5. But not both.)
fi

dnl If both are 'no', that's an error
if test "$KRB5" = "no" ; then
   if test "$KRB4" = "no" -o "$KRB4" = "default" ; then
      AC_MSG_ERROR(No usable kerberos settings.  You must use either Kerberos4 or Kerberos5 (the default).)
   fi
fi

dnl If K5 wasn't explicitly specified, or specified generically;
dnl and K4 wasn't explicitly specified, or explicitly disabled;
dnl then use the default value -- KRB5_DEFAULT
if test "$KRB5" = "default" -o "$KRB5" = "yes" ; then
   if test "$KRB4" = "default" -o "$KRB4" = "no" ; then
      KRB5=$KRB5_DEFAULT
   fi
fi

dnl If K5 wasn't defaulted above, or explicitly disabled
dnl then we're using K4, so disable K5.
dnl If K4 was specified generically
dnl then use the default value -- KRB4_DEFAULT
if test "$KRB5" = "default" -o "$KRB5" = "no" ; then
   KRB5=no
   if test "$KRB4" = "default" -o "$KRB4" = "yes" ; then
	 KRB4=$KRB4_DEFAULT
   fi
fi
      
dnl At this point we've figured out if we're using K5 or K4
if test "$KRB5" = "no" ; then
   KRBBASE=$KRB4
   KRBINCS="-I$KRBBASE/include -I$KRBBASE/include/kerberosIV"
   KRBLIBS="-lkrb5 -lkrb4 -lk5crypto -lcom_err"
   CFLAGS="$CFLAGS -DUSE_KRB4"
else
   KRBBASE=$KRB5
   KRBINCS="-I$KRBBASE/include"
   KRBLIBS="-lkrb5 -lk5crypto -lcom_err"
   CFLAGS="$CFLAGS -DUSE_KRB5"
fi

dnl OK, we've got a usable Kerberos setting
AC_MSG_RESULT($KRBBASE)
AC_SUBST(KRBBASE)
AC_SUBST(KRBINCS)
AC_SUBST(KRBLIBS)

dnl *********************************************************************
dnl * Check OpenSSL setting
dnl *********************************************************************

AC_MSG_CHECKING(OpenSSL settings)
AC_ARG_WITH(
   openssl,
   [  --with-openssl          specify where to find OpenSSL components],
   [case "$withval" in
       yes)
          OPENSSLBASE=$OPENSSL_DEFAULT
          ;;
       no)
          AC_MSG_ERROR(OpenSSL is required!)
          ;;
       *)
          OPENSSLBASE=$withval
          ;;
    esac
   ],
   OPENSSLBASE=$OPENSSL_DEFAULT
)
AC_SUBST(OPENSSLBASE) AC_MSG_RESULT($OPENSSLBASE)

dnl Do various compiler setup
AC_C_INLINE
AC_C_CONST
AC_TYPE_PID_T
AC_TYPE_SIZE_T
AC_TYPE_SIGNAL

dnl *********************************************************************
dnl * Checks for programs
dnl *********************************************************************

AC_PROG_INSTALL
AC_PROG_LN_S
AC_PROG_RANLIB
AC_PROG_MAKE_SET

AC_PATH_PROG(RM, rm, /bin/false, /bin:$PATH)
if test $ac_cv_path_RM = /bin/false; then
   AC_MSG_ERROR(Did not find rm at /bin)
fi
RM=${ac_cv_path_RM}
AC_SUBST(RM)

AC_PATH_PROG(AR, ar, /bin/false, /usr/bin:/usr/ccs/bin:$PATH)
if test $ac_cv_path_AR = /bin/false; then
   AC_MSG_ERROR(Did not find ar in /usr/bin or /usr/ccs/bin)
fi
AR=${ac_cv_path_AR}
AC_SUBST(AR)

dnl *********************************************************************
dnl * HEADERS
dnl *********************************************************************

AC_CONFIG_HEADER(config.h)
AC_HEADER_STDC

dnl     lib/ headers
AC_CHECK_HEADERS(sys/file.h sys/time.h syslog.h)

dnl     server/ headers--in lib/
dnl AC_CHECK_HEADERS(sys/time.h syslog.h)
AC_CHECK_HEADERS(sys/select.h)

dnl     client/ headers
AC_CHECK_HEADERS(limits.h strings.h sys/param.h)

dnl *********************************************************************
dnl * TYPEDEFS, STRUCTURES, & COMPILER CHARACTERISTICS
dnl *********************************************************************

AC_C_CONST
AC_HEADER_TIME
AC_STRUCT_TM

case "$target" in
    *-darwin*)
        SYS="DARWIN"
        KRB_LIBDIR="${KRBBASE}/lib"
#       KRB_REF="-Wl,-R${KRB_LIBDIR}"
#       OPENSSL_REF="-Wl,-R${OPENSSLBASE}"
#       SSL_REF="-Wl,-R${OPENSSLBASE}/lib"
        LD_PREF="-Wl,"
        LD_EXTRA="--verbose -bundle -all_load"
#       RPATH="-Wl,-R"
        ;;
    sparc-sun-solaris2.6)
        SYS="SOLARIS"
	if test "$UMICH" = yes ; then
		KRB_LIBDIR="${KRBBASE}/lib/shared"
	else
		KRB_LIBDIR="${KRBBASE}/lib"
	fi
	KRB_REF="-R${KRB_LIBDIR}"
	OPENSSL_REF="-R${OPENSSLBASE}"
	SOCK_LIBS="-lresolv -lsocket -lnsl"
	LD_EXTRA="-G -z text -z now"
	RPATH="-R"
	;;
    sparc-sun-solaris2.8)
	SYS="SOLARIS"
	KRB_LIBDIR="${KRBBASE}/lib"
	KRB_REF="-R${KRB_LIBDIR}"
	OPENSSL_REF="-R${OPENSSLBASE}"
	SOCK_LIBS="-lresolv -lsocket -lnsl"
	LD_EXTRA="-G -z text -z now"
	RPATH="-R"
	;;
    *-ibm-aix*)
	SYS="AIX"
	;;
    *-*-openbsd*)
	SYS="OPENBSD"
	KRB_LIBDIR="${KRBBASE}/lib"
	KRB_REF="-Wl,-R${KRB_LIBDIR}"
	OPENSSL_REF="-Wl,-R${OPENSSLBASE}"
	SSL_REF="-Wl,-R${OPENSSLBASE}/lib"
	LD_PREF="-Wl,"
	LD_EXTRA="-shared"
	RPATH="-Wl,-R"
	;;
    *-linux-*)
	SYS="LINUX"
	KRB_LIBDIR="${KRBBASE}/lib"
	KRB_REF="-Wl,-rpath ${KRB_LIBDIR}"
	OPENSSL_REF="-Wl,-rpath ${OPENSSLBASE}"
	SSL_REF="-Wl,-rpath ${OPENSSLBASE}/lib"
	SOCK_LIBS="-lresolv -lnsl"
	LD_PREF="-Wl,"
	LD_EXTRA="-shared"
	RPATH="-Wl,-rpath "
	;;
    *-hp-*)
	SYS="HPUX"
	KRB_LIBDIR="${KRBBASE}/lib"
	KRB_REF="-Wl,+b ${KRB_LIBDIR}"
	OPENSSL_REF="-Wl,+b ${OPENSSLBASE}"
	SSL_REF="-Wl,+b ${OPENSSLBASE}/lib"
	LD_PREF="-Wl,"
	LD_EXTRA="-Wl,-b"
	RPATH="-Wl,+b "
	;;
esac
AC_SUBST(SYS)
AC_SUBST(KRB_LIBDIR)
AC_SUBST(KRB_REF)
AC_SUBST(RSAGLUE_REF)
AC_SUBST(RSAREF_REF)
AC_SUBST(OPENSSL_REF)
AC_SUBST(SSL_REF)
AC_SUBST(UCB_LIB)
AC_SUBST(SOCK_LIBS)
AC_SUBST(LD_EXTRA)
AC_SUBST(LD_PREF)
AC_SUBST(RPATH)

dnl *********************************************************************
dnl * LIBRARY FUNCTIONS
dnl *********************************************************************

AC_CHECK_FUNCS(bzero gethostname mktime strdup strftime strtol strchr uname)

dnl *********************************************************************
dnl * LIBRARIES
dnl *********************************************************************

AC_CHECK_LIB(bsd, flock, [LIBS="$LIBS -lbsd"])
AC_CHECK_LIB(socket, listen, [LIBS="$LIBS -lsocket"])
AC_CHECK_LIB(nsl, gethostbyname, [LIBS="$LIBS -lnsl"])

XYZZY_LIBS="${LIBS}"
LIBS="${LIBS} -L/usr/ucblib"
AC_CHECK_LIB(ucb, ucbsigvec,
   [LIBS="${XYZZY_LIBS} -L/usr/ucblib -lucb -R/usr/ucblib"],
   [LIBS="${XYZZY_LIBS}"])


SUBDIRS="$SUBDIRS lib test"
AC_SUBST(SUBDIRS)

CONFIG_FILES="$CONFIG_FILES ./Makefile lib/Makefile test/Makefile"
AC_SUBST(CONFIG_FILES)

AC_OUTPUT(${CONFIG_FILES}, [date > stamp-h])

dnl *********************************************************************
dnl * The Makefiles and, more importantly, their subdirectories need
dnl * to be made before the SRC links may be made
dnl *********************************************************************

AC_ARG_ENABLE(srclinks,
   [  --enable-srclinks[=NAME] create billdo's object-to-source directory
                          symlinks named NAME [NAME=SRC]],
   [ if test "$ac_cv_prog_LN_S" = 'ln -s'; then
        if test "$enableval" = 'yes'; then
           SRCDIR=SRC
        else
           SRCDIR=${enableval}
        fi
        for dir in ${SUBDIRS};
        do
           echo "creating ${dir}/${SRCDIR}"
           case ${srcdir} in
           /*)
              $LN_S ${srcdir}/${dir} ${dir}/${SRCDIR}
              ;;
           *)
              $LN_S ../${srcdir}/${dir} ${dir}/${SRCDIR}
              ;;
           esac
        done
     else
        AC_MSG_WARN(unable to create SRC links)
     fi
   ]
)

exit
